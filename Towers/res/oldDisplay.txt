#include "display.h"
#include <GL/glew.h>
#include <iostream>


Display::Display(int width, int height, const std::string& title)
{
	SDL_Init(SDL_INIT_EVERYTHING);

	SDL_GL_SetAttribute(SDL_GL_RED_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_GREEN_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_BLUE_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_ALPHA_SIZE, 8);
	SDL_GL_SetAttribute(SDL_GL_BUFFER_SIZE, 32);
	SDL_GL_SetAttribute(SDL_GL_DOUBLEBUFFER, 1);

	currentColour = 0;
	fullscreen = false;

	m_window = SDL_CreateWindow(title.c_str(), SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED, width, height, SDL_WINDOW_OPENGL);
	m_glContext = SDL_GL_CreateContext(m_window);


	GLenum status = glewInit();

	if (status != GLEW_OK)
	{
		std::cerr << "Glew failed to initialize" << std::endl;
	}

	m_isClosed = false;

	Clear(255, 0, 0, 1);
	SDL_GL_SwapWindow(m_window);
}

Display::~Display()
{
	SDL_GL_DeleteContext(m_glContext);
	SDL_DestroyWindow(m_window);
	SDL_Quit();

}

void Display::Clear(float r, float g, float b, float a)
{
	glClearColor(r, g, b, a);
	glClear(GL_COLOR_BUFFER_BIT);
}
bool Display::IsClosed()
{
	return m_isClosed;
}
void Display::ChangeBG()
{
	/*switch (currentColour) {
	case 0: Clear(255, 0, 0, 1); break;
	case 1: Clear(0, 255, 0, 1); break;
	case 2: Clear(0, 0, 255, 1); break;
	}*/
	SDL_GL_SwapWindow(m_window);
}
void Display::Update()
{

	SDL_Event e;

	while (SDL_PollEvent(&e))
	{
		if (e.type == SDL_QUIT) {
			m_isClosed = true;
		}

		else if (e.type == SDL_MOUSEBUTTONDOWN)
		{
			if (currentColour < 2) {
				currentColour++;
			}
			else { currentColour = 0; }
			ChangeBG();

		}
		else if (e.type == SDL_KEYDOWN) {
			if (e.key.keysym.sym == SDLK_ESCAPE) {
				m_isClosed = true;
			}
			if (e.key.keysym.sym == SDLK_f) {
				if (fullscreen) {
					SDL_SetWindowFullscreen(m_window, 0);
					fullscreen = false;
				}
				else { SDL_SetWindowFullscreen(m_window, SDL_WINDOW_FULLSCREEN_DESKTOP); fullscreen = true; }
				ChangeBG();
			}
		}

	}


}